---
- name: Generate Kubernetes Configuration Files
  hosts: jumpbox
  vars:
    kubernetes_api_server: "https://server.kubernetes.local:6443"
  tasks:
    - name: Create kubeconfig for kubelet on each worker
      shell: |
        cd /root/kubernetes-the-hard-way
        kubectl config set-cluster {{ cluster_name }} \
          --certificate-authority=ca.crt \
          --embed-certs=true \
          --server={{ kubernetes_api_server }} \
          --kubeconfig={{ item }}.kubeconfig

        kubectl config set-credentials system:node:{{ item }} \
          --client-certificate={{ item }}.crt \
          --client-key={{ item }}.key \
          --embed-certs=true \
          --kubeconfig={{ item }}.kubeconfig

        kubectl config set-context default \
          --cluster={{ cluster_name }} \
          --user=system:node:{{ item }} \
          --kubeconfig={{ item }}.kubeconfig

        kubectl config use-context default --kubeconfig={{ item }}.kubeconfig
      args:
        creates: "/root/kubernetes-the-hard-way/{{ item }}.kubeconfig"
      loop:
        - node-0
        - node-1

    - name: Create kubeconfig for kube-proxy
      shell: |
        cd /root/kubernetes-the-hard-way
        kubectl config set-cluster {{ cluster_name }} \
          --certificate-authority=ca.crt \
          --embed-certs=true \
          --server={{ kubernetes_api_server }} \
          --kubeconfig=kube-proxy.kubeconfig

        kubectl config set-credentials system:kube-proxy \
          --client-certificate=kube-proxy.crt \
          --client-key=kube-proxy.key \
          --embed-certs=true \
          --kubeconfig=kube-proxy.kubeconfig

        kubectl config set-context default \
          --cluster={{ cluster_name }} \
          --user=system:kube-proxy \
          --kubeconfig=kube-proxy.kubeconfig

        kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
      args:
        creates: /root/kubernetes-the-hard-way/kube-proxy.kubeconfig

    - name: Create kubeconfig for kube-controller-manager
      shell: |
        cd /root/kubernetes-the-hard-way
        kubectl config set-cluster {{ cluster_name }} \
          --certificate-authority=ca.crt \
          --embed-certs=true \
          --server={{ kubernetes_api_server }} \
          --kubeconfig=kube-controller-manager.kubeconfig

        kubectl config set-credentials system:kube-controller-manager \
          --client-certificate=kube-controller-manager.crt \
          --client-key=kube-controller-manager.key \
          --embed-certs=true \
          --kubeconfig=kube-controller-manager.kubeconfig

        kubectl config set-context default \
          --cluster={{ cluster_name }} \
          --user=system:kube-controller-manager \
          --kubeconfig=kube-controller-manager.kubeconfig

        kubectl config use-context default --kubeconfig=kube-controller-manager.kubeconfig
      args:
        creates: /root/kubernetes-the-hard-way/kube-controller-manager.kubeconfig

    - name: Create kubeconfig for kube-scheduler
      shell: |
        cd /root/kubernetes-the-hard-way
        kubectl config set-cluster {{ cluster_name }} \
          --certificate-authority=ca.crt \
          --embed-certs=true \
          --server={{ kubernetes_api_server }} \
          --kubeconfig=kube-scheduler.kubeconfig

        kubectl config set-credentials system:kube-scheduler \
          --client-certificate=kube-scheduler.crt \
          --client-key=kube-scheduler.key \
          --embed-certs=true \
          --kubeconfig=kube-scheduler.kubeconfig

        kubectl config set-context default \
          --cluster={{ cluster_name }} \
          --user=system:kube-scheduler \
          --kubeconfig=kube-scheduler.kubeconfig

        kubectl config use-context default --kubeconfig=kube-scheduler.kubeconfig
      args:
        creates: /root/kubernetes-the-hard-way/kube-scheduler.kubeconfig

    - name: Create kubeconfig for admin user
      shell: |
        cd /root/kubernetes-the-hard-way
        kubectl config set-cluster {{ cluster_name }} \
          --certificate-authority=ca.crt \
          --embed-certs=true \
          --server={{ kubernetes_api_server }} \
          --kubeconfig=admin.kubeconfig

        kubectl config set-credentials admin \
          --client-certificate=admin.crt \
          --client-key=admin.key \
          --embed-certs=true \
          --kubeconfig=admin.kubeconfig

        kubectl config set-context default \
          --cluster={{ cluster_name }} \
          --user=admin \
          --kubeconfig=admin.kubeconfig

        kubectl config use-context default --kubeconfig=admin.kubeconfig
      args:
        creates: /root/kubernetes-the-hard-way/admin.kubeconfig

    - name: Distribute worker kubeconfigs
      shell: |
        cd /root/kubernetes-the-hard-way
        scp {{ item }}.kubeconfig kube-proxy.kubeconfig root@{{ item }}:~/
      loop:
        - node-0
        - node-1

    - name: Distribute controller kubeconfigs to server
      shell: |
        cd /root/kubernetes-the-hard-way
        scp admin.kubeconfig kube-controller-manager.kubeconfig kube-scheduler.kubeconfig root@server:~/